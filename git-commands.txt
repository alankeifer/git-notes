
1. make a directory/repo to be tracked by git 
   >>cd dirname    // directory which we want to be tracked by git. 
   >>git init  

2. add username and email 
   >> git config user.name="username" 
   >> git config user.email="username@gmail.com" 

3. Check git logs: 
   >> git log
   >> git log --author="username" 

4. Add files to staging area: 
   >> git add . 
   >> git add filename

5. Do a commit :
   >> git commit -m "1st commit" 

6. Check status : 
   >> git status  

7. List differences between the working copy of file 
   and the ones already in repository. 
   >> git diff 

8. Once you modify a working copy of a file and do a "git add filename" 
   then a "git diff filename"  will not show any differences that you have
   made.  
   
   "git diff" compares only the working copy and the file in repo. 
   "git diff --staged" compares the files in staging area and ones in repo. 

9. Removing files from git: 
   >>git rm filename  
   ## This will delete the working copy as well the file from the repo as well. 
   VVI : Whenever we do a "git rm" , we must do a "git commit" after that. 
   This will help to recover the deleted file if we need.  

10. Renaming files : 
    git mv old_name new_name 

11. Commiting directly to repo without placing the files in staging area. 
    ## Bypass staging area
    >> git commit -am "commiting directly to repo" 
    Note: 
     Disadvantage of directly commiting : 
     
     i) "-a" option will commit all the changes that we have done in the 
        working area. We may accidently end up commiting changes from other
	edited files to the repo. 
     ii) helpful only when we are editing/modifying existing files. 
    
12. Restore a copy of file from Repository (Basically getting a previous good
    version of file and making it the current working copy) 
    >> git checkout -- file_name_to_restore 

<<<<<<< HEAD
## ====================================================================== ##
   ## Working With GitHub## 
=======

>>>>>>> 5c3c08078203957a38bf2b1e00221511b6c7acfb

13. Connect a remote repo to your local system git bash.   
   >> git remote add Alias_for_YourRepoOnGit your_public_repo_url.git 

14. List Remote repo 
   >> git remote 

15. Pushing your files to public repo
    >> git push -u Alais_for_YourRepoOnGit  

16. Pull changes to your local machine
    >> git pull Alais_for_YourRepoOnGit

   

